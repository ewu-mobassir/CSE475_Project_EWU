# -*- coding: utf-8 -*-
"""Project_475.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RszhzCpKTQar32OG2NDfgPPnKhjBqijh
"""

#%%
import numpy as np
import pandas as pd
from pandas import DataFrame, Series
from sklearn.model_selection import train_test_split
from IPython.display import Image 
import io
import pydotplus
from sklearn import preprocessing
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import roc_auc_score
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
import graphviz
import pydotplus
import io
from six import StringIO  
from IPython.display import Image  
from sklearn.tree import export_graphviz
import matplotlib.pyplot as plt



data = pd.read_csv("diabetes_data.csv")
data.head()

print("Null values in dataset:", data.isnull().values.any())

def convert_yes_no(txt):
    if 'Yes' in txt:
        return 1
    elif 'Positive' in txt:
        return 1
    elif 'Female' in txt:
        return 1
    else:
        return 0

data['Gender'] = data['Gender'].apply(convert_yes_no)
data['Polyuria'] = data['Polyuria'].apply(convert_yes_no)
data['Polydipsia'] = data['Polydipsia'].apply(convert_yes_no)
data['sudden weight loss'] = data['sudden weight loss'].apply(convert_yes_no)
data['weakness'] = data['weakness'].apply(convert_yes_no)
data['Polyphagia'] = data['Polyphagia'].apply(convert_yes_no)
data['Genital thrush'] = data['Genital thrush'].apply(convert_yes_no)
data['visual blurring'] = data['visual blurring'].apply(convert_yes_no)
data['Itching'] = data['Itching'].apply(convert_yes_no)
data['Irritability'] = data['Irritability'].apply(convert_yes_no)
data['delayed healing'] = data['delayed healing'].apply(convert_yes_no)
data['partial paresis'] = data['partial paresis'].apply(convert_yes_no)
data['muscle stiffness'] = data['muscle stiffness'].apply(convert_yes_no)
data['Alopecia'] = data['Alopecia'].apply(convert_yes_no)
data['Obesity'] = data['Obesity'].apply(convert_yes_no)
data['class'] = data['class'].apply(convert_yes_no)

data.head()

features = data.columns
features = [x for x in features if x != 'class']
features

X = data[features]
y = data['class']

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)

print(len(X))
print(len(x_train))
print(len(x_test))

# Random forest (default parameters)
RF = RandomForestClassifier()
RF = RF.fit(x_train, y_train)

y_pred = RF.predict(x_test)
score = accuracy_score(y_test, y_pred) * 100
print("Accuracy using Random Forest Classifier: ", round(score, 2), "%" )

print("F1 Score: ",round(f1_score(y_test, y_pred)*100,2),"%")
print("Precision Score: ",round(precision_score(y_test, y_pred)*100,2),"%")
print("Recall Score: ",round(recall_score(y_test, y_pred)*100,2),"%")
print("AUC Score: ",round(roc_auc_score(y_test, y_pred)*100,2),"%")

print("\nConfusion Matrix: ")
cm = metrics.confusion_matrix(y_test, y_pred)
print(cm)

# Random forest (tuned parameters)
RF = RandomForestClassifier(max_depth=9, n_estimators=5, random_state=0)
RF = RF.fit(x_train, y_train)

y_pred = RF.predict(x_test)
score = accuracy_score(y_test, y_pred) * 100
print("Accuracy using Random Forest Classifier (Tuned): ", round(score, 2), "%" )
print("F1 Score: ",round(f1_score(y_test, y_pred)*100,2),"%")
print("Precision Score: ",round(precision_score(y_test, y_pred)*100,2),"%")
print("Recall Score: ",round(recall_score(y_test, y_pred)*100,2),"%")
print("AUC Score: ",round(roc_auc_score(y_test, y_pred)*100,2),"%")

print("\nConfusion Matrix: ")
cm = metrics.confusion_matrix(y_test, y_pred)
print(cm)

x_point = []
y_point = []
for i in range (1, 21):
    RF = RandomForestClassifier(max_depth=i, n_estimators=5, random_state=0)
    RF = RF.fit(x_train, y_train)
    y_pred = RF.predict(x_test)
    x_point.append(i)
    y_point.append(accuracy_score(y_test, y_pred))
plt.figure(figsize=(6,4), dpi=80)
plt.plot(x_point, y_point, color = 'red')
plt.title('Max Depth vs Accuracy (for n_estimators=5)')
plt.xlabel('Max Tree Depth')
plt.ylabel('Accuracy')
plt.grid(linestyle='--')
plt.xticks(range(1, 21, 2))
plt.show()

x_point = []
y_point = []
for i in range (1, 21):
    RF = RandomForestClassifier(max_depth=8, n_estimators=i, random_state = 0)
    RF = RF.fit(x_train, y_train)
    y_pred = RF.predict(x_test)
    x_point.append(i)
    y_point.append(accuracy_score(y_test, y_pred))
plt.figure(figsize=(6,4), dpi=80)
plt.plot(x_point, y_point, color = 'orange')
plt.title('N Trees vs Accuracy')
plt.xlabel('Number of Trees')
plt.ylabel('Accuracy')
plt.grid(linestyle='--')
plt.xticks(range(1, 22, 2))
plt.show()

logistic = LogisticRegression(max_iter=1000)
logistic.fit(x_train, y_train)

y_pred = logistic.predict(x_test)
score = accuracy_score(y_test, y_pred) * 100
print("Accuracy using Logistic Regression: ", round(score, 2), "%" )

print("F1 Score: ",round(f1_score(y_test, y_pred)*100,2),"%")
print("Precision Score: ",round(precision_score(y_test, y_pred)*100,2),"%")
print("Recall Score: ",round(recall_score(y_test, y_pred)*100,2),"%")
print("AUC Score: ",round(roc_auc_score(y_test, y_pred)*100,2),"%")

svmr = SVC(kernel='linear')
svmr.fit(x_train, y_train)
y_pred = svmr.predict(x_test)
score = accuracy_score(y_test, y_pred) * 100
print("Accuracy using SVM Classier (linear kernel): ", round(score, 2), "%" )

print("F1 Score: ",round(f1_score(y_test, y_pred)*100,2),"%")
print("Precision Score: ",round(precision_score(y_test, y_pred)*100,2),"%")
print("Recall Score: ",round(recall_score(y_test, y_pred)*100,2),"%")
print("AUC Score: ",round(roc_auc_score(y_test, y_pred)*100,2),"%")

dt = DecisionTreeClassifier()
dt = dt.fit(x_train, y_train)

y_pred = dt.predict(x_test)
score = accuracy_score(y_test, y_pred) * 100
print("Accuracy using Decision Tree: ", round(score, 2), "%" )

print("F1 Score: ",round(f1_score(y_test, y_pred)*100,2),"%")
print("Precision Score: ",round(precision_score(y_test, y_pred)*100,2),"%")
print("Recall Score: ",round(recall_score(y_test, y_pred)*100,2),"%")
print("AUC Score: ",round(roc_auc_score(y_test, y_pred)*100,2),"%")

from sklearn.naive_bayes import GaussianNB

gnb = GaussianNB()
gnb = gnb.fit(x_train, y_train)
y_pred = gnb.predict(x_test)
score = accuracy_score(y_test, y_pred) * 100
print("Accuracy using Gaussian Naive Bayes: ", round(score, 2), "%" )

print("F1 Score: ",round(f1_score(y_test, y_pred)*100,2),"%")
print("Precision Score: ",round(precision_score(y_test, y_pred)*100,2),"%")
print("Recall Score: ",round(recall_score(y_test, y_pred)*100,2),"%")
print("AUC Score: ",round(roc_auc_score(y_test, y_pred)*100,2),"%")

from sklearn.neural_network import MLPClassifier
mlpc = MLPClassifier(alpha=0.05, hidden_layer_sizes=(100, 50, 25, 10), random_state=1, max_iter=1000)
mlpc = mlpc.fit(x_train, y_train)

y_pred = mlpc.predict(x_test)
score = accuracy_score(y_test, y_pred) * 100
print("Accuracy using Multi Layer Perception Neural Network: ", round(score, 2), "%" )

print("F1 Score: ",round(f1_score(y_test, y_pred)*100,2),"%")
print("Precision Score: ",round(precision_score(y_test, y_pred)*100,2),"%")
print("Recall Score: ",round(recall_score(y_test, y_pred)*100,2),"%")
print("AUC Score: ",round(roc_auc_score(y_test, y_pred)*100,2),"%")

# cm = metrics.confusion_matrix(y_test, y_pred)
# print(cm)

#Visualization of normal dicision tree and saved to file
import os
#os.environ['PATH'] = os.environ['PATH']+';'+os.environ['CONDA_PREFIX']+r"\Library\bin\graphviz"

dot_data = StringIO()
export_graphviz(dt, out_file=dot_data, feature_names=features,  
                     class_names='class',
                filled=True, rounded=True,
                special_characters=True)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
Image(graph.create_png())
#graph.write_png('dt.png')

#%%
# Visualization of all the trees generated in Random Forest and saved to file
RF = RandomForestClassifier(max_depth=9, n_estimators=5, random_state=0)
RF = RF.fit(x_train, y_train)

import os
# os.environ['PATH'] = os.environ['PATH']+';'+os.environ['CONDA_PREFIX']+r"\Library\bin\graphviz"

n = 1
for treeRF in RF.estimators_:
    dot_data = StringIO()
    export_graphviz(treeRF, out_file=dot_data, feature_names=features,  
                         class_names='class',
                    filled=True, rounded=True,
                    special_characters=True)
    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
    Image(graph.create_png())
    graph.write_png(("RFTree{}.png".format(str(n))))
    n+=1









